!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!Make	I,makefile	/makefiles/
!_TAG_KIND_DESCRIPTION!Make	m,macro	/macros/
!_TAG_KIND_DESCRIPTION!Make	t,target	/targets/
!_TAG_KIND_DESCRIPTION!Markdown	S,subsection	/level 2 sections/
!_TAG_KIND_DESCRIPTION!Markdown	T,l4subsection	/level 4 sections/
!_TAG_KIND_DESCRIPTION!Markdown	c,chapter	/chapters/
!_TAG_KIND_DESCRIPTION!Markdown	h,hashtag	/hashtags/
!_TAG_KIND_DESCRIPTION!Markdown	n,footnote	/footnotes/
!_TAG_KIND_DESCRIPTION!Markdown	s,section	/sections/
!_TAG_KIND_DESCRIPTION!Markdown	t,subsubsection	/level 3 sections/
!_TAG_KIND_DESCRIPTION!Markdown	u,l5subsection	/level 5 sections/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C++	1.1	/current.age/
!_TAG_PARSER_VERSION!Make	0.0	/current.age/
!_TAG_PARSER_VERSION!Markdown	1.1	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/royi/Code/C++/project:斗地主残局/project/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/v6.1.0/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!Make!makefile	included	/included/
!_TAG_ROLE_DESCRIPTION!Make!makefile	optional	/optionally included/
1. **残局设置**	README.md	/^### 1. **残局设置**$/;"	S	section:斗地主残局破解""说明 and 规则
2. **目标**	README.md	/^### 2. **目标**$/;"	S	section:斗地主残局破解""说明 and 规则
3. **玩法**	README.md	/^### 3. **玩法**$/;"	S	section:斗地主残局破解""说明 and 规则
4. **策略**	README.md	/^### 4. **策略**$/;"	S	section:斗地主残局破解""说明 and 规则
5. **挑战**	README.md	/^### 5. **挑战**$/;"	S	section:斗地主残局破解""说明 and 规则
DAN	include/pai.h	/^class DAN : public PAI {$/;"	c
DAN	src/pai.cc	/^DAN::DAN(int x) : x(x), PAI(PAI_TYPE::DAN_TYPE) {}$/;"	f	class:DAN
DAN_TYPE	include/pai.h	/^  DAN_TYPE,$/;"	e	enum:PAI_TYPE
DUIZI	include/pai.h	/^class DUIZI : public PAI {$/;"	c
DUIZI	src/pai.cc	/^DUIZI::DUIZI(int x) : x(x), PAI(PAI_TYPE::DUIZI_TYPE) {}$/;"	f	class:DUIZI
DUIZI_TYPE	include/pai.h	/^  DUIZI_TYPE,$/;"	e	enum:PAI_TYPE
EDIT RULE	README.md	/^## EDIT RULE$/;"	s	chapter:Getting Started!
EXAMPLE	README.md	/^## EXAMPLE$/;"	s	chapter:Getting Started!
GO!	README.md	/^## GO!$/;"	s	chapter:Getting Started!
Getting Started!	README.md	/^# Getting Started!$/;"	c
LIANDUI	include/pai.h	/^class LIANDUI : public PAI {$/;"	c
LIANDUI	src/pai.cc	/^LIANDUI::LIANDUI(int x, int len) : x(x), len(len), PAI(PAI_TYPE::LIANDUI_TYPE) {}$/;"	f	class:LIANDUI
LIANDUI_TYPE	include/pai.h	/^  LIANDUI_TYPE,$/;"	e	enum:PAI_TYPE
MAX_N	include/pai.h	/^#define MAX_N /;"	d
MAX_N	main2.cpp	/^#define MAX_N /;"	d	file:
MAX_N	src/pai.cc	/^#define MAX_N /;"	d	file:
Node	include/tree.h	/^class Node {$/;"	c
Node	src/tree.cc	/^Node::Node() : p(new PASS()), win(0) {}$/;"	f	class:Node
Node	src/tree.cc	/^Node::Node(PAI *p, int win = 0) : p(p), win(win) {}$/;"	f	class:Node
PAI	include/pai.h	/^class PAI {$/;"	c
PAI	src/pai.cc	/^PAI::PAI(PAI_TYPE type) : type(type) {}$/;"	f	class:PAI
PAI_TYPE	include/pai.h	/^enum class PAI_TYPE {$/;"	g
PASS	include/pai.h	/^class PASS : public PAI {$/;"	c
PASS	src/pai.cc	/^PASS::PASS() : PAI(PAI_TYPE::PASS_TYPE) {}$/;"	f	class:PASS
PASS_TYPE	include/pai.h	/^  PASS_TYPE,$/;"	e	enum:PAI_TYPE
SANDAI	include/pai.h	/^class SANDAI : public PAI {$/;"	c
SANDAI	src/pai.cc	/^SANDAI::SANDAI(int x, PAI *dai) : x(x), dai(dai), PAI(PAI_TYPE::SANDAI_TYPE) {}$/;"	f	class:SANDAI
SANDAI_TYPE	include/pai.h	/^  SANDAI_TYPE,$/;"	e	enum:PAI_TYPE
SHUNZI	include/pai.h	/^class SHUNZI : public PAI {$/;"	c
SHUNZI	src/pai.cc	/^SHUNZI::SHUNZI(int x, int len) : x(x), len(len), PAI(PAI_TYPE::SHUNZI_TYPE) {}$/;"	f	class:SHUNZI
SHUNZI_TYPE	include/pai.h	/^  SHUNZI_TYPE,$/;"	e	enum:PAI_TYPE
WANGZHA	include/pai.h	/^class WANGZHA : public PAI {$/;"	c
WANGZHA	src/pai.cc	/^WANGZHA::WANGZHA() : PAI(PAI_TYPE::WANGZHA_TYPE) {}$/;"	f	class:WANGZHA
WANGZHA_TYPE	include/pai.h	/^  WANGZHA_TYPE,$/;"	e	enum:PAI_TYPE
ZHADAN	include/pai.h	/^class ZHADAN : public PAI {$/;"	c
ZHADAN	src/pai.cc	/^ZHADAN::ZHADAN(int x) : x(x), PAI(PAI_TYPE::ZHADAN_TYPE) {}$/;"	f	class:ZHADAN
ZHADAN_TYPE	include/pai.h	/^  ZHADAN_TYPE,$/;"	e	enum:PAI_TYPE
_PAI_H__	include/pai.h	/^#define _PAI_H__$/;"	d
_PrintLine_	main.cpp	/^#define _PrintLine_(/;"	d	file:
_PrintLine_Title_	main.cpp	/^#define _PrintLine_Title_(/;"	d	file:
_TREE_H__	include/tree.h	/^#define _TREE_H__$/;"	d
a	main.cpp	/^int a[MAX_N + 5] = {0};$/;"	v	typeref:typename:int[]
all	makefile	/^all: main.cpp src\/pai.cc src\/tree.cc$/;"	t
b	main.cpp	/^int b[MAX_N + 5] = {0};$/;"	v	typeref:typename:int[]
back	src/pai.cc	/^void DAN::back(int *arr) { $/;"	f	class:DAN	typeref:typename:void
back	src/pai.cc	/^void DUIZI::back(int *arr) { $/;"	f	class:DUIZI	typeref:typename:void
back	src/pai.cc	/^void LIANDUI::back(int *arr) { $/;"	f	class:LIANDUI	typeref:typename:void
back	src/pai.cc	/^void PASS::back(int *arr) { return ;}$/;"	f	class:PASS	typeref:typename:void
back	src/pai.cc	/^void SANDAI::back(int *arr) { $/;"	f	class:SANDAI	typeref:typename:void
back	src/pai.cc	/^void SHUNZI::back(int *arr) { $/;"	f	class:SHUNZI	typeref:typename:void
back	src/pai.cc	/^void WANGZHA::back(int *arr) { $/;"	f	class:WANGZHA	typeref:typename:void
back	src/pai.cc	/^void ZHADAN::back(int *arr) { $/;"	f	class:ZHADAN	typeref:typename:void
checkEmpty	src/tree.cc	/^static bool checkEmpty(int *arr) {$/;"	f	typeref:typename:bool	file:
child	include/tree.h	/^  vector<Node *> child;$/;"	m	class:Node	typeref:typename:vector<Node * >
clean	makefile	/^clean:$/;"	t
dai	include/pai.h	/^  PAI *dai;$/;"	m	class:SANDAI	typeref:typename:PAI *
get	src/pai.cc	/^vector<PAI *> DAN::get(int *arr) {$/;"	f	class:DAN	typeref:typename:vector<PAI * >
get	src/pai.cc	/^vector<PAI *> DUIZI::get(int *arr) {$/;"	f	class:DUIZI	typeref:typename:vector<PAI * >
get	src/pai.cc	/^vector<PAI *> LIANDUI::get(int *arr) {$/;"	f	class:LIANDUI	typeref:typename:vector<PAI * >
get	src/pai.cc	/^vector<PAI *> PASS::get(int *arr) {$/;"	f	class:PASS	typeref:typename:vector<PAI * >
get	src/pai.cc	/^vector<PAI *> SANDAI::get(int *arr) {$/;"	f	class:SANDAI	typeref:typename:vector<PAI * >
get	src/pai.cc	/^vector<PAI *> SHUNZI::get(int *arr) {$/;"	f	class:SHUNZI	typeref:typename:vector<PAI * >
get	src/pai.cc	/^vector<PAI *> WANGZHA::get(int *arr) {$/;"	f	class:WANGZHA	typeref:typename:vector<PAI * >
get	src/pai.cc	/^vector<PAI *> ZHADAN::get(int *arr) {$/;"	f	class:ZHADAN	typeref:typename:vector<PAI * >
getLegalPai	src/pai.cc	/^vector<PAI *> PAI::getLegalPai(int *arr, PAI *pai) {$/;"	f	class:PAI	typeref:typename:vector<PAI * >
getPai	src/pai.cc	/^vector<PAI *> PAI::getPai(int *arr) {$/;"	f	class:PAI	typeref:typename:vector<PAI * >
getTree	src/tree.cc	/^void getTree(Node *root, int *a, int *b) {$/;"	f	typeref:typename:void
init	main.cpp	/^inline void init() {$/;"	f	typeref:typename:void
last_line_size	main.cpp	/^size_t last_line_size;$/;"	v	typeref:typename:size_t
last_tittle_size	main.cpp	/^size_t last_tittle_size;$/;"	v	typeref:typename:size_t
len	include/pai.h	/^  int x, len;$/;"	m	class:LIANDUI	typeref:typename:int
len	include/pai.h	/^  int x, len;$/;"	m	class:SHUNZI	typeref:typename:int
main	main.cpp	/^int main() {$/;"	f	typeref:typename:int
main	main2.cpp	/^int main() {$/;"	f	typeref:typename:int
name	src/pai.cc	/^static string name[MAX_N + 5] = {"",  "",  "",    "3", "4",      "5",$/;"	v	typeref:typename:string[]	file:
operator >	src/pai.cc	/^bool DAN::operator>(PAI *pre) {$/;"	f	class:DAN	typeref:typename:bool
operator >	src/pai.cc	/^bool DUIZI::operator>(PAI *pre) {$/;"	f	class:DUIZI	typeref:typename:bool
operator >	src/pai.cc	/^bool LIANDUI::operator>(PAI *pre) {$/;"	f	class:LIANDUI	typeref:typename:bool
operator >	src/pai.cc	/^bool PASS::operator>(PAI *pre) {$/;"	f	class:PASS	typeref:typename:bool
operator >	src/pai.cc	/^bool SANDAI::operator>(PAI *pre) {$/;"	f	class:SANDAI	typeref:typename:bool
operator >	src/pai.cc	/^bool SHUNZI::operator>(PAI *pre) {$/;"	f	class:SHUNZI	typeref:typename:bool
operator >	src/pai.cc	/^bool WANGZHA::operator>(PAI *pre) {$/;"	f	class:WANGZHA	typeref:typename:bool
operator >	src/pai.cc	/^bool ZHADAN::operator>(PAI *pre) {$/;"	f	class:ZHADAN	typeref:typename:bool
output	src/pai.cc	/^ostream &DAN::output() { return cout << "DAN : " << name[x]; }$/;"	f	class:DAN	typeref:typename:ostream &
output	src/pai.cc	/^ostream &DUIZI::output() { return cout << "DUIZI : " << name[x]; }$/;"	f	class:DUIZI	typeref:typename:ostream &
output	src/pai.cc	/^ostream &LIANDUI::output() {$/;"	f	class:LIANDUI	typeref:typename:ostream &
output	src/pai.cc	/^ostream &PASS::output() { return cout << "PASS"; }$/;"	f	class:PASS	typeref:typename:ostream &
output	src/pai.cc	/^ostream &SANDAI::output() {$/;"	f	class:SANDAI	typeref:typename:ostream &
output	src/pai.cc	/^ostream &SHUNZI::output() {$/;"	f	class:SHUNZI	typeref:typename:ostream &
output	src/pai.cc	/^ostream &WANGZHA::output() { return cout << "WANGZHA"; }$/;"	f	class:WANGZHA	typeref:typename:ostream &
output	src/pai.cc	/^ostream &ZHADAN::output() { return cout << "ZHA : " << name[x]; }$/;"	f	class:ZHADAN	typeref:typename:ostream &
output_arr	src/pai.cc	/^void PAI::output_arr(int *arr) {$/;"	f	class:PAI	typeref:typename:void
output_solve	main.cpp	/^void output_solve(Node *root, int *a, int *b) {$/;"	f	typeref:typename:void
p	include/tree.h	/^  PAI *p;$/;"	m	class:Node	typeref:typename:PAI *
read	main.cpp	/^void read(FILE *fin, int *arr) {$/;"	f	typeref:typename:void
read_data	main.cpp	/^void read_data() {$/;"	f	typeref:typename:void
read_pai	main2.cpp	/^PAI *read_pai(int max_no = 8) {$/;"	f	typeref:typename:PAI *
root	main.cpp	/^Node *root;$/;"	v	typeref:typename:Node *
rule	main.cpp	/^void rule() {$/;"	f	typeref:typename:void
run	makefile	/^run: all$/;"	t
take	src/pai.cc	/^void DAN::take(int *arr) {$/;"	f	class:DAN	typeref:typename:void
take	src/pai.cc	/^void DUIZI::take(int *arr) {$/;"	f	class:DUIZI	typeref:typename:void
take	src/pai.cc	/^void LIANDUI::take(int *arr) {$/;"	f	class:LIANDUI	typeref:typename:void
take	src/pai.cc	/^void PASS::take(int *arr) { return ;}$/;"	f	class:PASS	typeref:typename:void
take	src/pai.cc	/^void SANDAI::take(int *arr) {$/;"	f	class:SANDAI	typeref:typename:void
take	src/pai.cc	/^void SHUNZI::take(int *arr) {$/;"	f	class:SHUNZI	typeref:typename:void
take	src/pai.cc	/^void WANGZHA::take(int *arr) {$/;"	f	class:WANGZHA	typeref:typename:void
take	src/pai.cc	/^void ZHADAN::take(int *arr) {$/;"	f	class:ZHADAN	typeref:typename:void
type	include/pai.h	/^  PAI_TYPE type; $/;"	m	class:PAI	typeref:typename:PAI_TYPE
usage	main2.cpp	/^void usage(int max_no) {$/;"	f	typeref:typename:void
w	main.cpp	/^struct winsize w;$/;"	v	typeref:struct:winsize
win	include/tree.h	/^  int win;$/;"	m	class:Node	typeref:typename:int
x	include/pai.h	/^  int x, len;$/;"	m	class:LIANDUI	typeref:typename:int
x	include/pai.h	/^  int x, len;$/;"	m	class:SHUNZI	typeref:typename:int
x	include/pai.h	/^  int x;$/;"	m	class:DAN	typeref:typename:int
x	include/pai.h	/^  int x;$/;"	m	class:DUIZI	typeref:typename:int
x	include/pai.h	/^  int x;$/;"	m	class:SANDAI	typeref:typename:int
x	include/pai.h	/^  int x;$/;"	m	class:ZHADAN	typeref:typename:int
斗地主残局破解	README.md	/^# 斗地主残局破解$/;"	c
流程说明	README.md	/^# 流程说明$/;"	c
算法说明	README.md	/^# 算法说明$/;"	c
说明 and 规则	README.md	/^## 说明 and 规则 $/;"	s	chapter:斗地主残局破解
